// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_interface.go

// Package mock_todo is a generated GoMock package.
package mock_todo

import (
	reflect "reflect"

	models "github.com/batroff/todo-back/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockUseCase) CreateTodo(arg0 *models.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockUseCaseMockRecorder) CreateTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockUseCase)(nil).CreateTodo), arg0)
}

// DeleteTodo mocks base method.
func (m *MockUseCase) DeleteTodo(arg0 models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockUseCaseMockRecorder) DeleteTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockUseCase)(nil).DeleteTodo), arg0)
}

// GetTodoByID mocks base method.
func (m *MockUseCase) GetTodoByID(arg0 models.ID) (*models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", arg0)
	ret0, _ := ret[0].(*models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MockUseCaseMockRecorder) GetTodoByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MockUseCase)(nil).GetTodoByID), arg0)
}

// GetTodosList mocks base method.
func (m *MockUseCase) GetTodosList() ([]*models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodosList")
	ret0, _ := ret[0].([]*models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosList indicates an expected call of GetTodosList.
func (mr *MockUseCaseMockRecorder) GetTodosList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosList", reflect.TypeOf((*MockUseCase)(nil).GetTodosList))
}

// UpdateTodo mocks base method.
func (m *MockUseCase) UpdateTodo(arg0 *models.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockUseCaseMockRecorder) UpdateTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockUseCase)(nil).UpdateTodo), arg0)
}
