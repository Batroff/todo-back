// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase_interface.go

// Package mock_team is a generated GoMock package.
package mock_team

import (
	reflect "reflect"

	models "github.com/batroff/todo-back/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockUseCase) CreateTeam(arg0 *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockUseCaseMockRecorder) CreateTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockUseCase)(nil).CreateTeam), arg0)
}

// DeleteTeam mocks base method.
func (m *MockUseCase) DeleteTeam(arg0 models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockUseCaseMockRecorder) DeleteTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockUseCase)(nil).DeleteTeam), arg0)
}

// SelectTeamByID mocks base method.
func (m *MockUseCase) SelectTeamByID(arg0 models.ID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTeamByID", arg0)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTeamByID indicates an expected call of SelectTeamByID.
func (mr *MockUseCaseMockRecorder) SelectTeamByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTeamByID", reflect.TypeOf((*MockUseCase)(nil).SelectTeamByID), arg0)
}

// SelectTeamsList mocks base method.
func (m *MockUseCase) SelectTeamsList() ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTeamsList")
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTeamsList indicates an expected call of SelectTeamsList.
func (mr *MockUseCaseMockRecorder) SelectTeamsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTeamsList", reflect.TypeOf((*MockUseCase)(nil).SelectTeamsList))
}

// UpdateTeam mocks base method.
func (m *MockUseCase) UpdateTeam(arg0 *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockUseCaseMockRecorder) UpdateTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockUseCase)(nil).UpdateTeam), arg0)
}

// MockUseCaseReader is a mock of UseCaseReader interface.
type MockUseCaseReader struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseReaderMockRecorder
}

// MockUseCaseReaderMockRecorder is the mock recorder for MockUseCaseReader.
type MockUseCaseReaderMockRecorder struct {
	mock *MockUseCaseReader
}

// NewMockUseCaseReader creates a new mock instance.
func NewMockUseCaseReader(ctrl *gomock.Controller) *MockUseCaseReader {
	mock := &MockUseCaseReader{ctrl: ctrl}
	mock.recorder = &MockUseCaseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseReader) EXPECT() *MockUseCaseReaderMockRecorder {
	return m.recorder
}

// SelectTeamByID mocks base method.
func (m *MockUseCaseReader) SelectTeamByID(arg0 models.ID) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTeamByID", arg0)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTeamByID indicates an expected call of SelectTeamByID.
func (mr *MockUseCaseReaderMockRecorder) SelectTeamByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTeamByID", reflect.TypeOf((*MockUseCaseReader)(nil).SelectTeamByID), arg0)
}

// SelectTeamsList mocks base method.
func (m *MockUseCaseReader) SelectTeamsList() ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTeamsList")
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTeamsList indicates an expected call of SelectTeamsList.
func (mr *MockUseCaseReaderMockRecorder) SelectTeamsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTeamsList", reflect.TypeOf((*MockUseCaseReader)(nil).SelectTeamsList))
}

// MockUseCaseWriter is a mock of UseCaseWriter interface.
type MockUseCaseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseWriterMockRecorder
}

// MockUseCaseWriterMockRecorder is the mock recorder for MockUseCaseWriter.
type MockUseCaseWriterMockRecorder struct {
	mock *MockUseCaseWriter
}

// NewMockUseCaseWriter creates a new mock instance.
func NewMockUseCaseWriter(ctrl *gomock.Controller) *MockUseCaseWriter {
	mock := &MockUseCaseWriter{ctrl: ctrl}
	mock.recorder = &MockUseCaseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseWriter) EXPECT() *MockUseCaseWriterMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockUseCaseWriter) CreateTeam(arg0 *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockUseCaseWriterMockRecorder) CreateTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockUseCaseWriter)(nil).CreateTeam), arg0)
}

// DeleteTeam mocks base method.
func (m *MockUseCaseWriter) DeleteTeam(arg0 models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockUseCaseWriterMockRecorder) DeleteTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockUseCaseWriter)(nil).DeleteTeam), arg0)
}

// UpdateTeam mocks base method.
func (m *MockUseCaseWriter) UpdateTeam(arg0 *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockUseCaseWriterMockRecorder) UpdateTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockUseCaseWriter)(nil).UpdateTeam), arg0)
}
