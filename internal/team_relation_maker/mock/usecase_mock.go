// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase_interface.go

// Package mock_relation_maker is a generated GoMock package.
package mock_relation_maker

import (
	reflect "reflect"

	models "github.com/batroff/todo-back/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateRelation mocks base method.
func (m *MockUseCase) CreateRelation(arg0 *models.UserTeamRel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRelation indicates an expected call of CreateRelation.
func (mr *MockUseCaseMockRecorder) CreateRelation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelation", reflect.TypeOf((*MockUseCase)(nil).CreateRelation), arg0)
}

// DeleteRelationByIDs mocks base method.
func (m *MockUseCase) DeleteRelationByIDs(teamID, userID models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationByIDs", teamID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationByIDs indicates an expected call of DeleteRelationByIDs.
func (mr *MockUseCaseMockRecorder) DeleteRelationByIDs(teamID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationByIDs", reflect.TypeOf((*MockUseCase)(nil).DeleteRelationByIDs), teamID, userID)
}

// DeleteRelationsByTeamID mocks base method.
func (m *MockUseCase) DeleteRelationsByTeamID(arg0 models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationsByTeamID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationsByTeamID indicates an expected call of DeleteRelationsByTeamID.
func (mr *MockUseCaseMockRecorder) DeleteRelationsByTeamID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationsByTeamID", reflect.TypeOf((*MockUseCase)(nil).DeleteRelationsByTeamID), arg0)
}

// SelectRelationByIDs mocks base method.
func (m *MockUseCase) SelectRelationByIDs(teamID, userID models.ID) (*models.UserTeamRel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRelationByIDs", teamID, userID)
	ret0, _ := ret[0].(*models.UserTeamRel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRelationByIDs indicates an expected call of SelectRelationByIDs.
func (mr *MockUseCaseMockRecorder) SelectRelationByIDs(teamID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRelationByIDs", reflect.TypeOf((*MockUseCase)(nil).SelectRelationByIDs), teamID, userID)
}

// SelectRelationsByTeamID mocks base method.
func (m *MockUseCase) SelectRelationsByTeamID(arg0 models.ID) ([]*models.UserTeamRel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRelationsByTeamID", arg0)
	ret0, _ := ret[0].([]*models.UserTeamRel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRelationsByTeamID indicates an expected call of SelectRelationsByTeamID.
func (mr *MockUseCaseMockRecorder) SelectRelationsByTeamID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRelationsByTeamID", reflect.TypeOf((*MockUseCase)(nil).SelectRelationsByTeamID), arg0)
}

// SelectRelationsByUserID mocks base method.
func (m *MockUseCase) SelectRelationsByUserID(arg0 models.ID) ([]*models.UserTeamRel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRelationsByUserID", arg0)
	ret0, _ := ret[0].([]*models.UserTeamRel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRelationsByUserID indicates an expected call of SelectRelationsByUserID.
func (mr *MockUseCaseMockRecorder) SelectRelationsByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRelationsByUserID", reflect.TypeOf((*MockUseCase)(nil).SelectRelationsByUserID), arg0)
}

// MockUseCaseReader is a mock of UseCaseReader interface.
type MockUseCaseReader struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseReaderMockRecorder
}

// MockUseCaseReaderMockRecorder is the mock recorder for MockUseCaseReader.
type MockUseCaseReaderMockRecorder struct {
	mock *MockUseCaseReader
}

// NewMockUseCaseReader creates a new mock instance.
func NewMockUseCaseReader(ctrl *gomock.Controller) *MockUseCaseReader {
	mock := &MockUseCaseReader{ctrl: ctrl}
	mock.recorder = &MockUseCaseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseReader) EXPECT() *MockUseCaseReaderMockRecorder {
	return m.recorder
}

// SelectRelationByIDs mocks base method.
func (m *MockUseCaseReader) SelectRelationByIDs(teamID, userID models.ID) (*models.UserTeamRel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRelationByIDs", teamID, userID)
	ret0, _ := ret[0].(*models.UserTeamRel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRelationByIDs indicates an expected call of SelectRelationByIDs.
func (mr *MockUseCaseReaderMockRecorder) SelectRelationByIDs(teamID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRelationByIDs", reflect.TypeOf((*MockUseCaseReader)(nil).SelectRelationByIDs), teamID, userID)
}

// SelectRelationsByTeamID mocks base method.
func (m *MockUseCaseReader) SelectRelationsByTeamID(arg0 models.ID) ([]*models.UserTeamRel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRelationsByTeamID", arg0)
	ret0, _ := ret[0].([]*models.UserTeamRel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRelationsByTeamID indicates an expected call of SelectRelationsByTeamID.
func (mr *MockUseCaseReaderMockRecorder) SelectRelationsByTeamID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRelationsByTeamID", reflect.TypeOf((*MockUseCaseReader)(nil).SelectRelationsByTeamID), arg0)
}

// SelectRelationsByUserID mocks base method.
func (m *MockUseCaseReader) SelectRelationsByUserID(arg0 models.ID) ([]*models.UserTeamRel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRelationsByUserID", arg0)
	ret0, _ := ret[0].([]*models.UserTeamRel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRelationsByUserID indicates an expected call of SelectRelationsByUserID.
func (mr *MockUseCaseReaderMockRecorder) SelectRelationsByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRelationsByUserID", reflect.TypeOf((*MockUseCaseReader)(nil).SelectRelationsByUserID), arg0)
}

// MockUseCaseWriter is a mock of UseCaseWriter interface.
type MockUseCaseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseWriterMockRecorder
}

// MockUseCaseWriterMockRecorder is the mock recorder for MockUseCaseWriter.
type MockUseCaseWriterMockRecorder struct {
	mock *MockUseCaseWriter
}

// NewMockUseCaseWriter creates a new mock instance.
func NewMockUseCaseWriter(ctrl *gomock.Controller) *MockUseCaseWriter {
	mock := &MockUseCaseWriter{ctrl: ctrl}
	mock.recorder = &MockUseCaseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseWriter) EXPECT() *MockUseCaseWriterMockRecorder {
	return m.recorder
}

// CreateRelation mocks base method.
func (m *MockUseCaseWriter) CreateRelation(arg0 *models.UserTeamRel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRelation indicates an expected call of CreateRelation.
func (mr *MockUseCaseWriterMockRecorder) CreateRelation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelation", reflect.TypeOf((*MockUseCaseWriter)(nil).CreateRelation), arg0)
}

// DeleteRelationByIDs mocks base method.
func (m *MockUseCaseWriter) DeleteRelationByIDs(teamID, userID models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationByIDs", teamID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationByIDs indicates an expected call of DeleteRelationByIDs.
func (mr *MockUseCaseWriterMockRecorder) DeleteRelationByIDs(teamID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationByIDs", reflect.TypeOf((*MockUseCaseWriter)(nil).DeleteRelationByIDs), teamID, userID)
}

// DeleteRelationsByTeamID mocks base method.
func (m *MockUseCaseWriter) DeleteRelationsByTeamID(arg0 models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationsByTeamID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationsByTeamID indicates an expected call of DeleteRelationsByTeamID.
func (mr *MockUseCaseWriterMockRecorder) DeleteRelationsByTeamID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationsByTeamID", reflect.TypeOf((*MockUseCaseWriter)(nil).DeleteRelationsByTeamID), arg0)
}
